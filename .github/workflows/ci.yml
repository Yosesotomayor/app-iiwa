name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., v1.2.5)'
        required: false
        default: 'v1.2.5'

env:
  UV_SYSTEM_PYTHON: true

jobs:
  test:
    name: Test on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-13, macos-latest] # Windows, macOS Intel, macOS Silicon
        python-version: ['3.11', '3.12']
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install UV
      uses: astral-sh/setup-uv@v2
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml"

    - name: Install dependencies
      run: |
        uv sync --extra dev

    - name: Run tests
      run: |
        uv run pytest --cov=app_iiwa --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      if: matrix.os == 'macos-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Code Quality
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install UV
      uses: astral-sh/setup-uv@v2
      with:
        enable-cache: true

    - name: Install dependencies
      run: |
        uv sync --extra dev

    - name: Run black
      run: |
        uv run black --check src/ tests/

    - name: Run isort
      run: |
        uv run isort --check src/ tests/

    - name: Run flake8
      run: |
        uv run flake8 src/ tests/

    - name: Run mypy
      run: |
        uv run mypy src/
      continue-on-error: true  # mypy puede ser estricto al inicio

  security:
    name: Security Scan
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '0'  # No fallar por vulnerabilidades

  build:
    name: Build Package
    runs-on: macos-latest
    needs: [test, lint]
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Necesario para tags

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install UV
      uses: astral-sh/setup-uv@v2
      with:
        enable-cache: true

    - name: Install build dependencies
      run: |
        uv sync --extra build

    - name: Build package
      run: |
        uv build

    - name: Check package
      run: |
        uv run python -m twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/

  build-executables:
    name: Build Executables
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        include:
          - os: windows-latest
            artifact-name: windows-executable
            platform: Windows-x64
          - os: macos-13  # Intel macOS
            artifact-name: macos-intel-executable
            platform: macOS-Intel
          - os: macos-latest  # Silicon macOS
            artifact-name: macos-silicon-executable
            platform: macOS-Silicon
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install UV
      uses: astral-sh/setup-uv@v2
      with:
        enable-cache: true

    - name: Install dependencies
      run: |
        uv sync --extra build

    - name: Build executable
      run: |
        uv run python scripts/build_executables.py

    - name: Upload executable artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: |
          App-IIWA-v*-${{ matrix.platform }}.zip
          dist_exe/
        retention-days: 90

  create-release-bundle:
    name: Upload Executables to Release
    runs-on: macos-latest
    needs: [build-executables]
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Download Windows executable
      uses: actions/download-artifact@v4
      with:
        name: windows-executable
        path: executables/

    - name: Download macOS Intel executable
      uses: actions/download-artifact@v4
      with:
        name: macos-intel-executable
        path: executables/

    - name: Download macOS Silicon executable
      uses: actions/download-artifact@v4
      with:
        name: macos-silicon-executable
        path: executables/

    - name: Upload executables to release
      if: github.event_name == 'release'
      run: |
        for file in executables/App-IIWA-v*.zip; do
          if [ -f "$file" ]; then
            gh release upload ${{ github.event.release.tag_name }} "$file"
          fi
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: List built executables (for manual runs)
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "Ejecutables construidos:"
        ls -la executables/
        echo "Para un release, estos archivos se subirían automáticamente."

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release' && !github.event.release.prerelease
    environment: pypi
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install UV
      uses: astral-sh/setup-uv@v2

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/

    - name: Publish to PyPI
      run: |
        uv run python -m twine upload dist/* --skip-existing
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}